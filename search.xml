<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何把python文件打包为可执行程序exe？</title>
      <link href="/posts/19805.html"/>
      <url>/posts/19805.html</url>
      
        <content type="html"><![CDATA[<p>如果你用Python写了个很优秀的小工具，然后别人也很喜欢用，你是不是感觉很有成就感？总希望能让更多的人使用它？</p><p>但是对于不懂Python的人，如果直接发python文件，想要运行起来还是比较难的，如果能把python文件打包为可执行文件exe，在windows系统上双击就可以运行，那将极大地方便人们去使用。  </p><p>本篇文章就介绍如何把Python GUI程序打包为可执行文件exe，可以在windows系统上双击轻松使用。</p><p>人生苦短，我用Python，Python为什么这么流行，因为其开发快捷方便，写脚本，写小工具，开发网站，数据分析，人工智能都让python光芒四射，而这些都要归功于python丰富的库。</p><p>简单理解就是，如果你想造一辆汽车，不需要从轮子开始造，只需要去找齐造汽车的零件，组装一下，一部汽车就成了。</p><p>Python就是这样，丰富的第三方库，让你在开发的过程中，不必要每次都从造轮子开始，而是把轮子直接拿过来组装，快速开发出你需要的模型来。</p><p>那我们如果要把python文件打包为exe可执行文件，有没有这样的库呢？回答是肯定的。</p><p>我们使用第三方库pyinstaller去打包python文件。</p><p>下面我们就介绍下如何使用pyinstaller打包Python文件？</p><ol><li><p>安装pyinstaller第三方库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pyinstaller<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行打包命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pyinstaller yourprogram<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>什么，就这么简单？<br>是的，你没看错，只需两步，你需要的exe文件就生成了，放在与你的yourprogram.py文件同目录下的dist文件夹里，就可以快乐的发给别人去臭显摆了，哈哈哈。</p><p>当然了，如果你还需要一些定制化的东西，比如我要打包一个GUI程序，而默认的图标太丑了，我要换一个更好看的图标等等， 我们只需要增加一些参数就能完成，下面我们就以打包GUI程序为例，简单介绍下几个用到的参数</p><p>先看我最终打包使用的命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pyinstaller <span class="token operator">-</span>F <span class="token operator">-</span>w <span class="token operator">-</span>i <span class="token number">16</span><span class="token punctuation">.</span>ico <span class="token operator">-</span>n active get_register_code<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们来介绍下用到的参数</p><table>  <tr>  </tr>  <tr>    <td>-F</td>    <td>指定打包后只生成一个exe格式的文件</td>  </tr>  <tr>    <td>-w</td>    <td>不显示windows cmd窗口(因为我们是个GUI程序，不需要显示cmd窗口，就是windows那个丑丑的黑色cmd窗口)</td>  </tr>  <tr>    <td>-i</td>    <td>更换打包后exe文件的显示图标，后面跟你需要替换成的图标文件</td>  </tr>  <tr>    <td>-n</td>    <td>指定打包为exe的文件名字，后面跟你你想要的exe名字</td>  </tr></table><p>就是这样，从此就可以把你写好的python程序打包为exe发给小白臭显摆，获取成就感了，也可以继续去忽悠你的女神了，哈。</p><p>扩展：</p><p>pyinstaller还有很多其他参数可以实现不同的效果，需要用时只需要去查下文档就一目了然了。</p>]]></content>
      
      
      <categories>
          
          <category> Python应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建免费个人博客</title>
      <link href="/posts/8681.html"/>
      <url>/posts/8681.html</url>
      
        <content type="html"><![CDATA[<p>不折腾，不成魔，没有自己的博客不算一个合格搬砖人，钱能买来的都不值得珍惜，哈哈，本篇文章主要介绍用github结合Hexo搭建个人免费博客,来实现自己的博客梦。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>安装Node.js</p><p>官网下载Node.js稳定版安装包,一路默认Next安装就行，官网地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></li><li><p>安装Git</p><p>官网下载Git安装，地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></li><li><p>我假设你有Github账户，没有的先面壁去，完了再去官网注册吧</p><p>地址：<a href="https://github.com/">https://github.com/</a></p></li></ol><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li><p>新建一个要存放博客文件的文件夹，比如我的都存放在D:\study\blog目录下。</p></li><li><p>在该目录下右键点击Git Bash Here，打开git的控制台窗口。</p></li><li><p>输入 <code>npm i hexo-cli -g</code> 安装Hexo，此时文件夹还是啥都没有。</p></li><li><p>初始化博客文件<code>hexo init</code>,此时会生成需要的博客文件。</p></li><li><p>输入<code>npm install</code> 安装必备的一些组件。</p></li><li><p>做完如上步骤，博客框架已经有了，但我们想要以网页的形式展现，在输入<code>hexo g</code> 生成静态网页，我们就可以登录网站看了。</p></li><li><p>输入hexo s，打开本地服务器，然后浏览器输入<code>http://localhost:4000/</code>就能查看博客真面目了，看完后记者按Ctrl+c关闭本地服务器。</p></li><li><p>如上博客就建好了，是不是简单，先别兴奋，此时经验的博客也只有自己能看到，想要让别人也能看到，就需要发布到服务器上，此刻，我们的Github就登场了.</p></li></ol><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><p>Github提供了一个Github Page的功能，来实现静态网页的显示，我们就是借用此功能来部署我们自己的博客.</p><h4 id="Github环境配置"><a href="#Github环境配置" class="headerlink" title="Github环境配置"></a>Github环境配置</h4><ol><li><p>在Github上新建一个仓库，如下：</p><p><img src="/posts/8681/new.jpg" alt="新建仓库"></p></li><li><p>然后在如下界面输入必要信息，注意看图中标注，尤其是仓库名字那个，<strong>必须是你自己github的用户名在加上.github.io后缀</strong>。例如我的，就是<strong>KenZP.github.io</strong>, 勾选创建readme，最后点Create就OK了。<br><img src="/posts/8681/githubio.png" alt="填写仓库名"><br><img src="https://cdn.jsdelivr.net/gh/KenZP/bed/githubio.png" alt="githubio"></p></li><li><p>仓库建好了，现在就需要把本地的博客部署到Github了，需要先做一些Github配置.<br>在git bash里面输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;你的github用户名&quot;git config --global user.email &quot;你注册github的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后生成密钥SSH key：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;你注册github的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在C盘用户名下有个.ssh文件夹，比如我的路径：<code>C:\Users\zhken\.ssh</code>,把里面的id_rsa.pub打开，复制里面的字串。</p><p>在你github头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便起一个,然后把上一步复制的字串写到Key那个框中,然后点Add SSH Key。<br><img src="/posts/8681/setting.png" alt="设置"><br><img src="/posts/8681/ssh.png" alt="ssh"><br><img src="/posts/8681/sshkey.png" alt="sshkey"></p><p>此刻，你本地就可以和Github仓库做交流了，下面就是把本地的博客部署到github。</p></li></ol><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ol><li>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</li></ol><p>修改最后一行的配置：注意的是仓库地址，repository修改为你自己的github项目地址,比如我的是<code>git@github.com:KenZP/KenZP.github.io.git</code></p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:KenZP&#x2F;KenZP.github.io.git  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>需要安装一个部署扩展：运行如下命令：<code>npm i hexo-deployer-git</code></li><li>最后一步，运行如下三个命令，就部署成功了，稍等片刻，让github给你打一会工，登陆你的github io地址就能看到了。<pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>博客部署成功了，那我们怎么写博客并发布呢？</p><ol><li>运行<code>hexo new post &quot;title&quot;</code>，这里的title具体是指要写的文章名，然后会在_post文件夹下生成一个markdown文件，即title.md</li><li>然后按照markdown语法在title.md里面写文章</li><li>写完后运行如下三连就发布成功了，就能在你的博客网站上看到新发的文章了。<pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过一顿操作，你的个人博客就建成了，也能发文章了，但是你发现这个只是一个最基础的博客，其实还有很多事要做，比如不喜欢githubio这样的网址，要绑定为自己的域名，比如不喜欢博客主题想换一个，等等这些还有很多东西可以DIY.</p><p>后面我会更新如何去换一个博客主题以及对主题的配置，最终DIY一个自己最喜欢的博客.</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
